const express = require("express");
const {
  validateQuery,
  handleValidationErrors,
} = require("../middlewares/queryValidation");
const {
  processQuery,
  getPlaceDetails,
  nearbySearch,
  healthCheck,
} = require("../controllers/queryController");

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     QueryPayload:
 *       type: object
 *       required:
 *         - prompt
 *         - user_location
 *       properties:
 *         prompt:
 *           type: string
 *           description: The natural language query for the LLM.
 *           example: "Find the best coffee shops near me."
 *         user_location:
 *           type: object
 *           properties:
 *             lat:
 *               type: number
 *               format: double
 *               description: Latitude of the user's current location.
 *               example: -6.917464
 *             lng:
 *               type: number
 *               format: double
 *               description: Longitude of the user's current location.
 *               example: 107.619125
 *         max_results:
 *           type: integer
 *           description: The maximum number of places to return.
 *           example: 5
 *         use_cache:
 *           type: boolean
 *           description: Flag to enable/disable caching for the query.
 *           example: true
 *     QueryResponse:
 *       type: object
 *       properties:
 *         llm_text:
 *           type: string
 *           description: A narrative summary generated by the LLM.
 *           example: "Based on your request, here are some great coffee shops..."
 *         places:
 *           type: array
 *           items:
 *             type: object
 *           description: Details of a place found by the search.
 *         cached:
 *           type: boolean
 *           description: Indicates if the result was served from cache.
 *           example: false
 *         processing_time:
 *           type: number
 *           description: Time taken to process the request in milliseconds.
 *           example: 1500
 *         request_id:
 *           type: string
 *           description: A unique identifier for the request.
 *           example: "req_1678886400000"
 *     NearbySearchPayload:
 *       type: object
 *       required:
 *         - location
 *         - place_type
 *       properties:
 *         location:
 *           type: object
 *           properties:
 *             lat:
 *               type: number
 *               format: double
 *               description: Latitude of the center of the search area.
 *               example: -6.917464
 *             lng:
 *               type: number
 *               format: double
 *               description: Longitude of the center of the search area.
 *               example: 107.619125
 *         place_type:
 *           type: string
 *           description: The type of place to search for (e.g., restaurant, cafe).
 *           example: "restaurant"
 *         radius:
 *           type: integer
 *           description: The search radius in meters.
 *           example: 1000
 *         keyword:
 *           type: string
 *           description: An optional keyword to filter results.
 *           example: "pizza"
 *     NearbySearchResponse:
 *       type: object
 *       properties:
 *         places:
 *           type: array
 *           items:
 *             type: object
 *           description: Details of a place found by the search.
 *         total:
 *           type: integer
 *           description: The total number of places found.
 *           example: 5
 */

/**
 * @swagger
 * /query:
 *   post:
 *     summary: Process a natural language query with a local LLM and Google Maps.
 *     tags:
 *       - Maps & LLM
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/QueryPayload'
 *     responses:
 *       200:
 *         description: Successfully processed the query and returned recommendations.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/QueryResponse'
 *       400:
 *         description: Bad request, validation failed.
 *       500:
 *         description: Internal server error.
 */
router.post("/query", validateQuery, handleValidationErrors, processQuery);

/**
 * @swagger
 * /place/{placeId}:
 *   get:
 *     summary: Get detailed information about a specific place.
 *     tags:
 *       - Maps & LLM
 *     parameters:
 *       - in: path
 *         name: placeId
 *         required: true
 *         description: The unique ID of the place.
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Successful response with place details.
 *       404:
 *         description: Place not found.
 *       500:
 *         description: Internal server error.
 */
router.get("/place/:placeId", getPlaceDetails);

/**
 * @swagger
 * /nearby:
 *   post:
 *     summary: Search for places near a given location.
 *     tags:
 *       - Maps & LLM
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/NearbySearchPayload'
 *     responses:
 *       200:
 *         description: Successful response with a list of nearby places.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NearbySearchResponse'
 *       400:
 *         description: Bad request, location and place_type are required.
 *       500:
 *         description: Internal server error.
 */
router.post("/nearby", nearbySearch);

/**
 * @swagger
 * /health:
 *   get:
 *     summary: Check the health of the API server.
 *     tags:
 *       - Utility
 *     responses:
 *       200:
 *         description: The server is running and healthy.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "healthy"
 *                 timestamp:
 *                   type: number
 *                   example: 1678886400000
 */
router.get("/health", healthCheck);

module.exports = router;
